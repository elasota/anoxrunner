StaticSampler SS_Linear
{
}

StaticSampler SS_LinearClampEdge
{
	MinFilter = Linear
	MagFilter = Linear
	AddressModeU = ClampEdge
	AddressModeV = ClampEdge
	AddressModeW = ClampEdge
}

StaticSampler SS_MipMapped
{
	MinFilter = Linear
	MagFilter = Linear
	MipMapMode = Linear
	Anisotropy = Config(CFG_Anisotropy)
}

PushConstants PC_WorldSurface
{
	SurfaceNormal =
	{
		Type = float3
	}

	Transform =
	{
		Type = float3x4
	}
}

struct S_WorldSurfaceVertexData
{
	float3 Position
	uint SurfaceIndex
}

struct S_ModelVertexData
{
	float2 TexCoord
	uint VertexIndex
}

InputLayout IL_WorldSurface
{
	VertexInputFeeds =
	{
		WorldSurfaceVertexData
	}

	VertexInputs =
	{
		WorldSurfaceVertexData =
		{
			InputFeed = WorldSurfaceVertexData
			InputSources = S_WorldSurfaceVertexData
		}
	}
}

struct S_ModelVSPushConstants
{
	float3x4 Transform
	float4 InterformTransform
	uint PrevFrame_NextFrame
	uint NumVerts
	float FrameInterpolator

}

struct S_FaceModelVSPushConstants
{
	float3x4 Transform
	float3x4 HeadTransform
	float4 InterformTransform
	uint PrevFrame_NextFrame
	uint NumVerts
	float FrameInterpolator
}

PushConstants PC_Model
{
	Constants =
	{
		Type = S_ModelVSPushConstants
		StageVisibility = Vertex
	}
}

PushConstants PC_FaceModel
{
	Constants =
	{
		Type = S_FaceModelVSPushConstants
		StageVisibility = Vertex
	}
}

InputLayout IL_Model
{
	VertexInputFeeds =
	{
		ModelVertexData
	}

	VertexInputs =
	{
		ModelVertexData =
		{
			InputFeed = ModelVertexData
			InputSources = S_ModelVertexData
		}
	}
}

DescriptorLayout DL_WorldLightMappedSurface
{
	SurfaceTexture =
	{
		Type = Texture2D<float4>
	}

	SurfaceTextureSampler =
	{
		Type = Sampler
	}

	LightMapTexture =
	{
		Type = Texture2D<float4>
		Sampler = SS_Linear
	}
}

DescriptorLayout DL_WorldSimpleSurface
{
	SurfaceTexture =
	{
		Type = Texture2D<float4>
	}

	SurfaceTextureSampler =
	{
		Type = Sampler
	}
}

DescriptorLayout DL_WorldSimpleInterformSurface
{
	SurfaceTexture1 =
	{
		Type = Texture2D<float4>
		Sampler = SS_MipMapped
	}

	SurfaceTexture2 =
	{
		Type = Texture2D<float4>
		Sampler = SS_MipMapped
	}

	PaletteTexture =
	{
		Type = Texture2D<float4>
		Sampler = SS_LinearClampEdge
	}
}

DescriptorLayout DL_WorldLightMappedInterformSurface
{
	SurfaceTexture1 =
	{
		Type = Texture2D<float4>
		Sampler = SS_MipMapped
	}

	SurfaceTexture2 =
	{
		Type = Texture2D<float4>
		Sampler = SS_MipMapped
	}

	PaletteTexture =
	{
		Type = Texture2D<float4>
		Sampler = SS_LinearClampEdge
	}

	LightMapTexture =
	{
		Type = Texture2D<float4>
		Sampler = SS_Linear
	}
}

DescriptorLayout DL_Interface
{
	UITexture =
	{
		Type = Texture2D<float4>
		Sampler = SS_Linear
	}
}

struct S_UIVertexCoordinate
{
	float2 VertexCoord
}

struct S_UIElementTransformSimple
{
	float4 ElementPosAndSize
}

InputLayout IL_InterfaceSimple
{
	VertexInputFeeds =
	{
		VertexCoords =
		{
			Stepping = Vertex
		}
		ElementTransforms =
		{
			Stepping = Instance
		}
	}

	VertexInputs =
	{
		VertexCoords =
		{
			InputFeed = VertexCoords
			InputSources = S_UIVertexCoordinate
		}
		ElementTransforms =
		{
			InputFeed = ElementTransforms
			InputSources = S_UIElementTransformSimple
		}
	}
}

RenderPass RP_Interface
{
	RenderTargets =
	{
		Color =
		{
			LoadOp = Load
			StoreOp = Store
			Format = Config(CFG_RenderTargetFormat)
		}
	}
}

RenderPass RP_SimpleColorTarget
{
	RenderTargets =
	{
		Color =
		{
			LoadOp = Discard
			StoreOp = Store
			Format = Config(CFG_RenderTargetFormat)
		}
	}

	AllowInternalTransitions = true
}
